#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include "doctest.h"
#include "../../src/solver.h"


TEST_CASE("Test string to Board conversion") 
{

    std::string testBoard1 = "9...84.6.6.4..52.7.3..7..8.76...15...53.....1...4.96.31.5.26.9...2.4....8....371.";
    std::string testBoard2 = "1...5.2.9 ..7...... .6....... 2........ ...5.1..2 ....2.39. 3.4.9...1 5...1...3 ...8...4.";

    BoardVec testBoardVec1 = {
        {'9', '.', '.', '.', '8', '4', '.', '6', '.'},
        {'6','.', '4', '.', '.', '5', '2', '.', '7'},
        {'.', '3', '.', '.', '7', '.', '.', '8', '.'},
        {'7', '6', '.', '.', '.', '1', '5', '.', '.'},
        {'.', '5', '3', '.', '.', '.', '.', '.', '1'},
        {'.', '.', '.', '4', '.', '9', '6', '.', '3'},
        {'1', '.', '5', '.', '2', '6', '.', '9', '.'},
        {'.', '.', '2', '.', '4', '.', '.', '.', '.'},
        {'8', '.', '.', '.', '.', '3', '7', '1', '.'}
    };

    BoardVec testBoardVec2 = 
    {
        {'1', '.', '.', '.', '5', '.', '2', '.', '9'},
        {'.','7', '.', '.', '.', '.', '.', '.', '.'},
        {'.', '6', '.', '.', '.', '.', '.', '.', '.'},
        {'2', '.', '.', '.', '.', '.', '.', '.', '.'},
        {'.', '.', '.', '5', '.', '1', '.', '.', '2'},
        {'.', '.', '.', '.', '2', '.', '3', '9', '.'},
        {'3', '.', '4', '.', '9', '.', '.', '.', '1'},
        {'5', '.', '.', '.', '1', '.', '.', '.', '3'},
        {'.', '.', '.', '8', '.', '.', '.', '4', '.'}
    };

    auto ss = SudokuSolver();
    auto ret = ss.convertToBoardVec( testBoard1 );
    CHECK( ss.compareBoardVec( ret, testBoardVec1) == true);
}

TEST_CASE("Test sudoku board validation") 
{

    std::string invalidBoard1 = "83..7....6..195....98....6.8...6...34..8.3..17...2...6.6....28....419..5....8..79";
    std::string invalidBoard2 = ".3..7....6..195....98....6.8...6...34.88.3..17...2...6.6....28....419..5....8..79";
    std::string invalidBoard3 = "..9.7...5..21..9..1...28....7...5..1..851.....5....3.......3..68........21.....87";
    std::string validBoard1 = "59....147...9....8.72....3.7...4.29..2..3.8.68..17..5...5764..9.36..5...1..8....2";
    std::string validBoard2 = "6...5.....73..8.2.854.27...2.17..53.4...69..7.8....9...273.1.84.6.54...93.......1";
    std::string validBoard3 = "53..7....6..195....98....6.8...6...34..8.3..17...2...6.6....28....419..5....8..79";

    auto s = SudokuSolver();

    CHECK(s.validate(invalidBoard1).empty() == true);
    CHECK(s.validate(invalidBoard2).empty() == true);
    CHECK(s.validate(invalidBoard3).empty() == true);
    CHECK(s.validate(validBoard1).empty() == false);
    CHECK(s.validate(validBoard2).empty() == false);
    CHECK(s.validate(validBoard3).empty() == false);

}

TEST_CASE("Test Board to string conversion") 
{
    BoardVec testBoardVec1 = {{'9', '.', '.', '.', '8', '4', '.', '6', '.'},{'6','.', '4', '.', '.', '5', '2', '.', '7'},{'.', '3', '.', '.', '7', '.', '.', '8', '.'},{'7', '6', '.', '.', '.', '1', '5', '.', '.'},{'.', '5', '3', '.', '.', '.', '.', '.', '1'},{'.', '.', '.', '4', '.', '9', '6', '.', '3'},{'1', '.', '5', '.', '2', '6', '.', '9', '.'},{'.', '.', '2', '.', '4', '.', '.', '.', '.'},{'8', '.', '.', '.', '.', '3', '7', '1', '.'}};

    BoardVec testBoardVec2 = 
    {{'6', '8', '.', '9', '.', '5', '.', '.', '9'},{'.','7', '.', '.', '.', '.', '.', '.', '.'},{'.', '6', '.', '.', '.', '.', '.', '.', '.'},{'2', '.', '.', '.', '.', '.', '.', '.', '.'},{'.', '.', '.', '5', '.', '1', '.', '.', '2'},{'.', '.', '.', '.', '2', '.', '3', '9', '.'},{'3', '.', '4', '.', '9', '.', '.', '.', '1'},{'5', '.', '.', '.', '1', '.', '.', '.', '3'},{'.', '.', '.', '8', '.', '.', '.', '4', '.'}};

    std::string testBoardString1  = "9...84.6.6.4..52.7.3..7..8.76...15...53.....1...4.96.31.5.26.9...2.4....8....371.";
    std::string testBoardString2 =  "68.9.5..9.7........6.......2...........5.1..2....2.39.3.4.9...15...1...3...8...4.";

    auto s = SudokuSolver();
    CHECK(s.convertBoardToString(testBoardVec1) == testBoardString1);
    CHECK(s.convertBoardToString(testBoardVec2) == testBoardString2);

}


TEST_CASE("Solve Sudoku Puzzles") {
    std::string testBoard1  = ".5..83.17...1..4..3.4..56.8....3...9.9.8245....6....7...9....5...729..861.36.72.4";
    std::string testBoard2  = "2.6.3......1.65.7..471.8.5.5......29..8.194.6...42...1....428..6.93....5.7.....13";
    std::string testBoard3  = "..45.21781...9..3....8....46..45.....7.9...128.12.35..4.......935..6.8.7.9.3..62.";
    std::string testBoard4  = "59....147...9....8.72....3.7...4.29..2..3.8.68..17..5...5764..9.36..5...1..8....2";
    std::string testBoard5  = "9...84.6.6.4..52.7.3..7..8.76...15...53.....1...4.96.31.5.26.9...2.4....8....371.";
    std::string testBoard6  = "68.9.5.....3...5.84.21.87.339.72.8.........1..45..69...6.8.4..2..1..2.757...13...";
    std::string testBoard7  = "...34...2..6.82.737..1..45..82..5.14....983..67......514.7.....9.5.3..2..3....8.6";
    std::string testBoard8  = "6...5.....73..8.2.854.27...2.17..53.4...69..7.8....9...273.1.84.6.54...93.......1";
    std::string testBoard9  = "..75..9.4....823.5..16....28...36.7..16..42..43.19..5.54...8....29.71.3.......6.9";
    std::string testBoard10 = "........8..3...4...9..2..6.....79.......612...6.5.2.7...8...5...1.....2.4.5.....3";
    std::string testBoard11 = "........2..8.1.9..5....3.4....1.93...6..3..8...37......4......53.1.7.8..2........";
    std::string testBoard12 = "..2...7...1.....6.5......18....37.......49.....41.23....3.2.9...8.....5.6.......2";
    std::string testBoard13 = "........7..4.2.6..8.....31......29...4..9..3...95.6....1......8..6.5.2..7......6.";
    std::string testBoard14 = "..4..3....7..8....2.81....6..3....9..8..2....1..7....3......45....8..9....9..5..8";
    std::string testBoard15 = "..6..1....5..3....9..4....7..1....2..3..9....4..5....13.....68....3..2....2..8..3";
    std::string testBoard16 = "........3..1..9.6..5..8.4.....9...8...867.....1....2....6..7.2..3.8..5..4.......8";
    std::string testBoard17 = "........5..6..87..3......9....1.7.4...7...8...4...6....9..8...3..16..4..5...2....";
    std::string testBoard18 = ".....5..3..9....4..81.4.......7.......4..2..68...14.3.......2...4...6..79...5..1.";
    std::string testBoard19= "..9.7...5..21..9..1...28....7...5..1..851.....5....3.......3..68........21.....87";
    

    std::string solvedBoard1  = "652483917978162435314975628825736149791824563436519872269348751547291386183657294";
    std::string solvedBoard2  = "256734198891265374347198652514683729728519436963427581135942867689371245472856913";
    std::string solvedBoard3  = "964532178187694235235817964629451783573986412841273596416728359352169847798345621";
    std::string solvedBoard4  = "598326147314957628672481935753648291421539876869172453285764319936215784147893562";
    std::string solvedBoard5  = "927384165684915237531672489769231548453768921218459673175826394392147856846593712";
    std::string solvedBoard6  = "687935241913247568452168793396721854278459316145386927569874132831692475724513689";
    std::string solvedBoard7  = "851347692496582173723169458382675914514298367679413285148726539965834721237951846";
    std::string solvedBoard8  = "612453798973618425854927163291784536435269817786135942527391684168542379349876251";
    std::string solvedBoard9  = "287513964964782315351649782895236471716854293432197856543968127629471538178325649";
    std::string solvedBoard10 = "621943758783615492594728361142879635357461289869532174238197546916354827475286913";
    std::string solvedBoard11 = "639847512478512963512693748724189356965234187183765294847921635351476829296358471";
    std::string solvedBoard12 = "832416795417985263596273418951837624328649571764152389173528946289364157645791832";
    std::string solvedBoard13 = "963814527154327689827965314371482956645791832289536741512673498496158273738249165";
    std::string solvedBoard14 = "594263871671584329238197546763418295985326714142759683816932457357841962429675138";
    std::string solvedBoard15 = "826971354754836192913425867571643928238197546469582731347219685185364279692758413";
    std::string solvedBoard16 = "862714953741359862953286471374921685298675134615438297586147329137892546429563718";
    std::string solvedBoard17 = "714963285926518734385274691238197546657342819149856327492785163871639452563421978";
    std::string solvedBoard18 = "427165893539278641681349725216793458394582176875614932758431269143926587962857314";

    auto s = SudokuSolver();

    CHECK(s.solve(testBoard1)  == solvedBoard1);
    CHECK(s.solve(testBoard2)  == solvedBoard2);
    CHECK(s.solve(testBoard3)  == solvedBoard3);
    CHECK(s.solve(testBoard4)  == solvedBoard4);
    CHECK(s.solve(testBoard5)  == solvedBoard5);
    CHECK(s.solve(testBoard6)  == solvedBoard6);
    CHECK(s.solve(testBoard7)  == solvedBoard7);
    CHECK(s.solve(testBoard8)  == solvedBoard8);
    CHECK(s.solve(testBoard9)  == solvedBoard9);
    CHECK(s.solve(testBoard10) == solvedBoard10);
    CHECK(s.solve(testBoard11) == solvedBoard11);
    CHECK(s.solve(testBoard12) == solvedBoard12);
    CHECK(s.solve(testBoard13) == solvedBoard13);
    CHECK(s.solve(testBoard14) == solvedBoard14);
    CHECK(s.solve(testBoard15) == solvedBoard15);
    CHECK(s.solve(testBoard16) == solvedBoard16);
    CHECK(s.solve(testBoard17) == solvedBoard17);
    CHECK(s.solve(testBoard18) == solvedBoard18);
    CHECK(s.solve(testBoard19) == "");

}
